// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
    Not(in=instruction[15], out=isA);
    Mux16(a=outInner, b=instruction, sel=isA, out=out1);

    // REGISTRO A
    Not(in=instruction[5], out=D1Not);
    Nand(a=instruction[15], b=D1Not, out=CA);
    ARegister(in=in=out1, load=CA, out=OA, out[0..14]=addressM);

    //OutA/M
    And(a=instruction[15], b=instruction[12], out=am);
    Mux16(a=OA, b=inM, sel=am, out=OutAm);


    // REGISTRO D
    And(a=instruction[15], b=instruction[4], out=d2);
    DRegister(in=outInner, load=d2, out=OutD);

    // Leer c1...c6

    And(a=instruction[15], b=instruction[11], out=c1);
    And(a=instruction[15], b=instruction[10], out=c2);
    And(a=instruction[15], b=instruction[9], out=c3);
    And(a=instruction[15], b=instruction[8], out=c4);
    And(a=instruction[15], b=instruction[7], out=c5);
    And(a=instruction[15], b=instruction[6], out=c6);

    //ALU
    ALU(x=OutD, y=OutAm, zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6, out=outInner, zr=zr, ng=ng);

    // PC
    And(a=instruction[15], b=instruction[0], out=j3);
    And(a=instruction[15], b=instruction[1], out=j1);
    And(a=instruction[15], b=instruction[2], out=j2);
    Or(a=ng, b=zr, out=ngzr);
    Not(in=ngzr, out=ngzrNot);
    And(a=j1, b=ng, out=isLT);
    And(a=j2, b=zr, out=isEQ);
    And(a=j3, b=ngzrNot, out=isGT);
    Or(a=isLT, b=isEQ, out=orPart);
    Or(a=orPart, b=isGT, out=isJUMP);
    Not(in=isJUMP, out=notJUMP);
    PC(in=OA, load=isJUMP, inc=notJUMP, reset=reset, out[0..14]=pc);
    And(a=instruction[15], b=instruction[3], out=D3);
    Or(a=false, b=D3, out=writeM);
}