
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    Not16(in=x, out=notx);
    Mux4Way16(a=x, b=notx, c[0..15]=false, d[0..15]=true, sel[1]=zx, sel[0]=nx, out=a);

    Not16(in=y, out=noty);
    Mux4Way16(a=y, b=noty, c[0..15]=false, d[0..15]=true, sel[1]=zy, sel[0]=ny, out=b);

    And16(a=a, b=b, out=aANDB);
    Add16(a=a, b=b, out=aADDB);

    Mux16(a=aANDB, b=aADDB, sel=f, out=o);

    Not16(in=o, out=noto);
    Mux16(a=o, b=noto, sel=no, out=out, out[15]=ng, out[0..7]=out8LSB, out[8..15]=out8MSB);

    Or8Way(in=out8LSB, out=or8LSB);
    Or8Way(in=out8MSB, out=or8MSB);

    Or(a=or8LSB, b=or8MSB, out=or16out);

    Not(in=or16out, out=zr);
    
}